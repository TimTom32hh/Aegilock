// Datei: aegilock.min.js

document.addEventListener("DOMContentLoaded", () => {
  const captchas = document.querySelectorAll(".aegilock-captcha");

  captchas.forEach(async (el) => {
    const form = el.closest("form");
    if (!form) return console.warn("[Aegilock] Kein zugehöriges Formular gefunden");

    const label        = el.querySelector("#formshieldLabel");
    const icon         = el.querySelector("#formshieldCheck");
    const feedbackBox  = document.getElementById("formshieldFeedback");
    const submitButton = document.getElementById("formshieldSubmit");

    let challengeData = null;
    let solved        = false;
    let powResult     = {};

    // Keine Default-Sitekey-Fallbacks mehr!
    const sitekey   = el.dataset.sitekey || window.AEGILOCK_SITEKEY;
    const apiUrl    = window.AEGILOCK_API_URL        || "/wp-json/aegilock/v1/formshield-verify";
    const apiSubmit = window.AEGILOCK_API_URL_SUBMIT || "/wp-json/aegilock/v1/formsubmit";

    if (!sitekey) {
      console.error("[Aegilock] Kein sitekey gesetzt – bitte im Plugin-Admin hinterlegen!");
      if (label) label.textContent = "Konfiguration fehlerhaft";
      if (icon)  icon.setAttribute("stroke", "#d600c3");
      el.style.opacity = "1";
      return;
    }

    // Formular-Action auf den WP-REST-Endpoint setzen
    form.action = apiSubmit;

    // 1) Challenge anfordern
    try {
      const res = await fetch(apiUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          sitekey,
          ua: navigator.userAgent,
          entropy: Math.random().toString(36).slice(2),
          timestamp: Date.now()
        })
      });
      if (!res.ok) throw new Error("Challenge fehlgeschlagen");
      challengeData = await res.json();
      if (label) label.textContent = "Wird verifiziert …";
    } catch {
      if (label) label.textContent = "Verifizierung fehlgeschlagen";
      if (icon)  icon.setAttribute("stroke", "#d600c3");
      el.style.opacity = "1";
      return;
    }

    // 2) Proof-of-Work lösen
    async function solveChallenge() {
      const { challenge, difficulty } = challengeData;
      const prefix = "0".repeat(difficulty);
      let nonce = 0;
      while (true) {
        const input  = challenge + nonce;
        const buffer = new TextEncoder().encode(input);
        const digest = await crypto.subtle.digest("SHA-256", buffer);
        const hash   = Array.from(new Uint8Array(digest))
                             .map(b => b.toString(16).padStart(2, "0"))
                             .join("");
        if (hash.startsWith(prefix)) {
          powResult = { challenge, nonce, hash };
          solved = true;
          // UI-Update
          if (feedbackBox) {
            feedbackBox.textContent = "Lösung bereit – Sie können absenden.";
            feedbackBox.style.color = "#00cfff";
          }
          el.style.opacity = "1";
          if (submitButton) submitButton.disabled = false;
          if (label) label.textContent = "Ich bin ein Mensch";
          if (icon)  icon.setAttribute("stroke", "#00cfff");
          break;
        }
        nonce++;
        if (nonce % 5000 === 0) await new Promise(r => setTimeout(r, 0));
      }
    }

    // 3) Bei Eingabe Proof-of-Work starten
    form.querySelectorAll("input, textarea").forEach((i) => {
      i.addEventListener("input", () => {
        if (!solved && challengeData) solveChallenge();
      }, { once: true });
    });

    // 4) Formular abschicken
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!solved || !powResult.challenge) {
        if (feedbackBox) {
          feedbackBox.textContent = "Verifizierung läuft noch – bitte warten …";
          feedbackBox.style.color = "#d600c3";
        }
        return;
      }

      if (feedbackBox) feedbackBox.textContent = "";

      // PoW-Daten anhängen
      ["challenge", "nonce", "hash"].forEach((key) => {
        const input = document.createElement("input");
        input.type  = "hidden";
        input.name  = key;
        input.value = powResult[key];
        form.appendChild(input);
      });

      // Abschicken
      const formData = new FormData(form);
      try {
        const res    = await fetch(form.action, {
          method: form.method,
          body: new URLSearchParams(formData)
        });
        const result = await res.json();

        if (result.success && result.bot === false) {
          if (feedbackBox) {
            feedbackBox.textContent = "✅ Du bist ein Mensch – Vielen Dank!";
            feedbackBox.style.color = "#00cfff";
          }
          setTimeout(() => { if (label) label.textContent = ""; }, 1500);
        } else {
          if (feedbackBox) {
            feedbackBox.textContent = "❌ " + (result.message || "Verweigert.");
            feedbackBox.style.color = "#d600c3";
          }
        }
      } catch {
        if (feedbackBox) {
          feedbackBox.textContent = "❌ Fehler beim Absenden.";
          feedbackBox.style.color = "#d600c3";
        }
      }
    });
  });
});
